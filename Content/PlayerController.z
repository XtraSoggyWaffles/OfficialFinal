class PlayerController : ZilchComponent
{
    var NearBuilding : Boolean = false;
    [Property]
    var MovementSpeed : Real;
    [Property]
    var JumpMultiplier : Real;
    [Property]
    var ClimbSpeed : Real;
    [Property]
    var DisplayBuildingDistance : Boolean;
    var DistanceFromClosestBuilding : Real = 0;
    var CanIMove : Boolean = true;
    
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
    }

    function OnCollisionPersisted(event : CollisionEvent)
    {
        if(event.OtherObject.Name == "Building")
         {
             //Console.WriteLine("`event.OtherObject.BuildingArray.ImFalling`");
             //this.Space.LevelSettings.GravityEffect.Active = true;
         }
    }

    function OnCollisionStarted(event : CollisionEvent)
    {
        //dConsole.WriteLine("`event.OtherObject.Name`");
        if(event.OtherObject.Name == "Building")
         {
            if(this.Space.LevelSettings.GravityEffect.Active == true)
            {
                this.Space.LevelSettings.GravityEffect.Active = false;
                this.Owner.RigidBody.Velocity = Real3(0.0, 0.0, 0.0);
            }
         }
         
         if(event.OtherObject.Name == "BuildingFalling")
         {
            if(this.Space.LevelSettings.GravityEffect.Active == true)
            {
                this.Space.LevelSettings.GravityEffect.Active = true;
            }
         }
    }
    
    function OnCollisionEnded(event : CollisionEvent)
    {
        //Console.WriteLine(this.Owner.Name);
        if(this.Space != null && event.OtherObject.Name == "Building")
         {
            if(this.Space.LevelSettings != null && this.Space.LevelSettings.GravityEffect.Active == false)
            {
                this.Space.LevelSettings.GravityEffect.Active = true;
            }
            else 
            {
                
            }
         }
    }



   function OnLogicUpdate(event : UpdateEvent)
{

    if(this.DisplayBuildingDistance)
    {
        Console.WriteLine(this.DistanceFromClosestBuilding); 
    }
  var movement = Real3(0.0, 0.0, 0.0);
  
  if(this.CanIMove)
  {
      // control left, right, and up
      if(Zero.Keyboard.KeyIsDown(Keys.A))
      {
          //Console.WriteLine(this.NearBuilding, this.DistanceFromClosestBuilding);
        if(this.NearBuilding && this.DistanceFromClosestBuilding < 1)
          {
              //this.Owner.SweptController.Gravity = 0;
              this.Owner.Transform.Translation -= Real3(10,0,0) * this.MovementSpeed * event.Dt;
          }
          else if(this.NearBuilding && this.DistanceFromClosestBuilding > 0)
          {
             this.Owner.Transform.Translation -= Real3(10,0,0) * this.MovementSpeed * event.Dt;
          }
          else if(!this.NearBuilding)
          {
              this.Owner.Transform.Translation -= Real3(10,0,0) * this.MovementSpeed * event.Dt;
          }
          
          if(Zero.Keyboard.KeyIsDown(Keys.W))
          {
              this.Owner.Transform.Translation += Real3(0,5,0) * event.Dt;
          }
          else if(Zero.Keyboard.KeyIsDown(Keys.S))
          {
              this.Owner.Transform.Translation -= Real3(0,5,0) * event.Dt;
          }
      }

      if(Zero.Keyboard.KeyIsDown(Keys.D))
      {
          if(this.NearBuilding && this.DistanceFromClosestBuilding < 1)
          {
              //this.Owner.SweptController.Gravity = 0;
              //movement.Y += 5.0;
              this.Owner.Transform.Translation -= Real3(-10,0,0) * this.MovementSpeed * event.Dt;
          }
          else if(this.NearBuilding && this.DistanceFromClosestBuilding > 0)
          {
             this.Owner.Transform.Translation -= Real3(-10,0,0) * this.MovementSpeed * event.Dt;
          }
          else if(!this.NearBuilding)
          {
              this.Owner.Transform.Translation -= Real3(-10,0,0) * this.MovementSpeed * event.Dt;
          }
          
          if(Zero.Keyboard.KeyIsDown(Keys.W))
          {
              this.Owner.Transform.Translation += Real3(0,5,0) * event.Dt;
          }
          else if(Zero.Keyboard.KeyIsDown(Keys.S))
          {
              this.Owner.Transform.Translation -= Real3(0,5,0) * event.Dt;
          }
        
      }
      
      if(Zero.Keyboard.KeyIsDown(Keys.W))
      {
          if(this.NearBuilding)
          {
              this.Owner.Transform.Translation += Real3(0,this.ClimbSpeed,0) * event.Dt;
          }
      }
      
      if(Zero.Keyboard.KeyIsDown(Keys.S))
      {
          if(this.NearBuilding)
          {
              this.Owner.Transform.Translation += Real3(0,-this.ClimbSpeed,0) * event.Dt;
          }
      }

      if(Zero.Keyboard.KeyIsPressed(Keys.Space))
      {
          this.Owner.Transform.Translation += Real3(0.0, 100.0, 0.0) * this.JumpMultiplier * event.Dt;
      }
      
  }

  // if the jump key is not pressed, find the point of release and stop jumping

  // at the end, update
 }
}